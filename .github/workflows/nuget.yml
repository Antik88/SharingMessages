name: Deploy NuGet

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Extract current version
      id: extract_version
      run: |
        VERSION_REGEX='(?<=<Version>)(.*)(?=<\/Version>)'
        CURRENT_VERSION=$(grep -oP "$VERSION_REGEX" YourProject.csproj)
        echo "Current version: $CURRENT_VERSION"
        echo "::set-output name=current_version::$CURRENT_VERSION"

    - name: Increment version
      id: increment_version
      run: |
        CURRENT_VERSION=${{ steps.extract_version.outputs.current_version }}
        IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
        PATCH_VERSION=${VERSION_PARTS[2]}
        NEW_PATCH_VERSION=$((PATCH_VERSION + 1))
        NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH_VERSION"
        echo "New version: $NEW_VERSION"
        echo "::set-output name=new_version::$NEW_VERSION"

    - name: Update version in csproj
      run: |
        NEW_VERSION=${{ steps.increment_version.outputs.new_version }}
        sed -i "s/<Version>.*<\/Version>/<Version>$NEW_VERSION<\/Version>/" YourProject.csproj

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --configuration Release --no-restore

    - name: Pack NuGet package
      run: dotnet pack --configuration Release --no-build --output ./nupkg

    - name: Publish NuGet package
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: dotnet nuget push ./nupkg/*.nupkg -k $NUGET_API_KEY -s https://nuget.pkg.github.com/antik88/index.json
